{"version":3,"file":"static/js/30.f6c54e78.chunk.js","mappings":"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","sources":["components/textArea/index.tsx","containers/createTodo/index.tsx","components/modal/index.tsx","components/toggle/index.tsx","hooks/useDidUpdateEffect.ts","containers/singleTodo/index.tsx","containers/todoList/index.tsx","containers/dashboard/index.tsx"],"sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { useFormatMessage } from '../../hooks/useFormatMessage';\n\ntype TextAreaProps = {\n  value: string;\n  handleChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  labelId?: string;\n};\n\nconst TextArea = ({ value, handleChange, labelId }: TextAreaProps) => {\n  const formatMessage = useFormatMessage();\n\n  return (\n    <>\n      {labelId && (\n        <label\n          htmlFor={labelId ? `textarea-${labelId}` : ''}\n          className=\"block mb-2 text-2xl font-medium text-gray-900\"\n        >\n          <FormattedMessage id={labelId} />\n        </label>\n      )}\n      <textarea\n        id={labelId ? `textarea-${labelId}` : ''}\n        rows={10}\n        className=\"block resize-none p-2.5 w-full text-2xl text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500\"\n        placeholder={formatMessage('component.textArea.placeholder')}\n        required={false}\n        onChange={handleChange}\n        value={value}\n      />\n    </>\n  );\n};\n\nexport default TextArea;\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Button from '../../components/button';\nimport TextArea from '../../components/textArea';\nimport { addTodo } from '../../store/reducers/todoList';\nimport { useDispatch } from 'react-redux';\n\nconst CreateTodo = () => {\n  const dispatch = useDispatch();\n  const [value, setValue] = useState('');\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) =>\n    setValue(event.target.value);\n\n  const handleCreate = () => {\n    if (!value) return;\n    dispatch(addTodo({ uuid: uuidv4(), value, completed: false }));\n    setValue('');\n  };\n\n  return (\n    <div className=\"w-full flex flex-col\">\n      <h1 className=\"mb-5 text-4xl\">\n        <FormattedMessage id=\"container.createTodo.title\" />\n      </h1>\n      <TextArea value={value} handleChange={handleChange} />\n      <Button\n        handleClick={handleCreate}\n        className=\"mt-5 self-center md:self-auto\"\n        disabled={!value}\n      >\n        <FormattedMessage id=\"container.createTodo.addTodo\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default CreateTodo;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Icon from '../icon';\nimport { useFormatMessage } from '../../hooks/useFormatMessage';\n\ntype ModalProps = {\n  isOpen: boolean;\n  closeAction: () => void;\n  confirmAction: () => void;\n  title: string;\n  body: React.ReactNode;\n};\nconst Modal = ({ isOpen, closeAction, confirmAction, title, body }: ModalProps) => {\n  const formatMessage = useFormatMessage();\n\n  if (isOpen)\n    return (\n      <>\n        <div className=\"justify-center items-center flex overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none\">\n          <div className=\"relative w-auto my-6 mx-auto max-w-3xl\">\n            <div className=\"border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none\">\n              <div className=\"flex items-start justify-between p-5 border-b border-solid border-slate-200 rounded-t\">\n                <h3 className=\"text-4xl font-semibold\">{title}</h3>\n                <button\n                  className=\"p-1 ml-auto bg-transparent border-0 text-black opacity-5 float-right text-3xl leading-none font-semibold outline-none focus:outline-none\"\n                  onClick={closeAction}\n                >\n                  <Icon\n                    className=\"w-[24px] h-[24px]\"\n                    iconName=\"close\"\n                    alt={formatMessage('component.modal.closeAlt')}\n                  />\n                </button>\n              </div>\n              <div className=\"relative p-10 flex-auto text-3xl\">{body}</div>\n              <div className=\"flex items-center justify-between p-6 border-t border-solid border-slate-200 rounded-b\">\n                <button\n                  className=\"text-red-500 background-transparent font-bold uppercase px-6 py-2 text-2xl outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\"\n                  type=\"button\"\n                  onClick={closeAction}\n                >\n                  <FormattedMessage id=\"component.modal.cancel\" />\n                </button>\n                <button\n                  className=\"bg-emerald-500 text-white active:bg-emerald-600 font-bold uppercase text-2xl px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150\"\n                  type=\"button\"\n                  onClick={confirmAction}\n                >\n                  <FormattedMessage id=\"component.modal.confirm\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"opacity-25 fixed inset-0 z-40 bg-black\" />\n      </>\n    );\n\n  return null;\n};\n\nexport default Modal;\n","import React from 'react';\n\ntype ToggleProps = {\n  uuid: string;\n  value: boolean;\n  handleChange: () => void;\n  label: string;\n  className?: string;\n};\n\nconst Toggle = ({ uuid, value, handleChange, label, className }: ToggleProps) => {\n  return (\n    <div className={className}>\n      <label\n        htmlFor={`toggle-${uuid}`}\n        className=\"inline-flex relative items-center cursor-pointer\"\n      >\n        <input\n          type=\"checkbox\"\n          value=\"\"\n          checked={value}\n          onChange={handleChange}\n          id={`toggle-${uuid}`}\n          className=\"sr-only peer\"\n        />\n        <div className=\"w-14 h-9 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[4px] after:left-[3px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-blue-600\" />\n        <span className=\"ml-3 text-2xl font-medium text-grey-900\">{label}</span>\n      </label>\n    </div>\n  );\n};\n\nexport default Toggle;\n","import { useEffect, useRef } from 'react';\n\nconst useDidUpdateEffect = (callback: (...args: any) => any, dependencies: any[]) => {\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) callback();\n    else didMount.current = true;\n  }, dependencies);\n};\n\nexport default useDidUpdateEffect;\n","import React, { useRef, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { isEqual } from 'lodash';\nimport { toast } from 'react-toast';\n\nimport Button from '../../components/button';\nimport Modal from '../../components/modal';\nimport TextArea from '../../components/textArea';\nimport Toggle from '../../components/toggle';\nimport useDidUpdateEffect from '../../hooks/useDidUpdateEffect';\nimport { Todo } from '../../types';\nimport { deleteTodo, updateTodo } from '../../store/reducers/todoList';\nimport { useDispatch } from 'react-redux';\nimport { useFormatMessage } from '../../hooks/useFormatMessage';\n\ntype SingleTodoProps = { todo: Todo };\n\nconst SingleTodo = ({ todo }: SingleTodoProps) => {\n  const { uuid, value, completed } = todo;\n  const formatMessage = useFormatMessage();\n  const dispatch = useDispatch();\n  const [currentValue, setCurrentValue] = useState(value);\n  const [isOpen, setIsOpen] = useState(false);\n  const [currentCompleted, setCurrentCompleted] = useState(completed);\n  const prevTodo = useRef(todo);\n\n  useDidUpdateEffect(() => {\n    if (!isEqual(prevTodo.current, todo))\n      toast.success(formatMessage('container.singleTodo.success'));\n  }, [todo]);\n\n  const closeModal = () => setIsOpen(false);\n  const openModal = () => setIsOpen(true);\n\n  const handleDelete = () => {\n    dispatch(deleteTodo(uuid));\n    closeModal();\n  };\n\n  const handleUpdate = () =>\n    dispatch(updateTodo({ uuid, value: currentValue, completed: currentCompleted }));\n\n  const handleValueChange = (event: React.ChangeEvent<HTMLTextAreaElement>) =>\n    setCurrentValue(event.target.value);\n\n  const handleCompletedChange = () => setCurrentCompleted(!currentCompleted);\n\n  return (\n    <div className=\"w-full mb-10\">\n      <div className=\"w-full flex flex-col md:flex-row items-center p-5\">\n        <div className=\"flex flex-col w-full md:flex-1 text-2xl\">\n          <div className=\"flex items-center\">\n            <span className=\"font-bold mr-1.5\">\n              <FormattedMessage id=\"container.singleTodo.uuid\" />\n            </span>\n            <div>{uuid}</div>\n          </div>\n          <div className=\"flex flex-col mt-5\">\n            <span className=\"mr-1.5 text-2xl\">\n              <FormattedMessage id=\"container.singleTodo.text\" />\n            </span>\n            <TextArea value={currentValue} handleChange={handleValueChange} />\n          </div>\n          <Toggle\n            uuid={uuid}\n            className=\"mt-5\"\n            value={currentCompleted}\n            handleChange={handleCompletedChange}\n            label={formatMessage('container.singleTodo.completedLabel')}\n          />\n        </div>\n        <div className=\"flex items-center md:flex-col mt-5 md:mt-0 md:ml-5\">\n          <Button\n            handleClick={handleUpdate}\n            className=\"py-4\"\n            disabled={currentValue === value && completed === currentCompleted}\n          >\n            <FormattedMessage id=\"container.singleTodo.update\" />\n          </Button>\n          <Button handleClick={openModal} className=\"ml-5 md:ml-0 md:mt-5 py-4\" color=\"red\">\n            <FormattedMessage id=\"container.singleTodo.delete\" />\n          </Button>\n        </div>\n      </div>\n      <Modal\n        isOpen={isOpen}\n        closeAction={closeModal}\n        confirmAction={handleDelete}\n        title={formatMessage('container.singleTodo.modalTitle')}\n        body={formatMessage('container.singleTodo.modalBody', { uuid })}\n      />\n    </div>\n  );\n};\n\nexport default SingleTodo;\n","import React from 'react';\nimport { isEmpty } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport Button from '../../components/button';\nimport SingleTodo from '../singleTodo';\nimport { RootState } from '../../store';\nimport { Todo } from '../../types';\nimport { replaceTodos } from '../../store/reducers/todoList';\n\nconst TodoList = () => {\n  const dispatch = useDispatch();\n  const todoList = useSelector((state: RootState) => state.todoList);\n\n  const handleBulkDelete = () => dispatch(replaceTodos(todoList.filter((todo) => !todo.completed)));\n\n  const ifEmpty = isEmpty(todoList);\n  return (\n    <div className=\"w-full flex flex-col mt-5\">\n      <div className=\"flex align-center justify-between py-5 border-y-2\">\n        <h1 className=\"text-4xl leading-[35px]\">\n          <FormattedMessage id=\"container.todoList.title\" />\n        </h1>\n        {!ifEmpty && (\n          <Button\n            handleClick={handleBulkDelete}\n            className=\"py-3\"\n            color=\"blue\"\n            disabled={isEmpty(todoList.filter((todo) => todo.completed))}\n          >\n            <FormattedMessage id=\"container.todoList.removeBulk\" />\n          </Button>\n        )}\n      </div>\n      <div\n        className={`w-full flex ${ifEmpty ? 'justify-start md:justify-center' : 'justify-center'}`}\n      >\n        {ifEmpty ? (\n          <h2 className=\"text-6xl mt-20\">\n            <FormattedMessage id=\"container.todoList.empty\" />\n          </h2>\n        ) : (\n          <div className=\"w-full md:w-8/12\">\n            {todoList.map((todo: Todo) => (\n              <SingleTodo key={todo.uuid} todo={todo} />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport CreateTodo from '../createTodo';\nimport TodoList from '../todoList';\n\nconst Dashboard = () => {\n  return (\n    <div className=\"w-full flex flex-col items-center\">\n      <h1 className=\"text-6xl mb-1.5\">\n        <FormattedMessage id=\"container.dashboard.title\" />\n      </h1>\n      <div className=\"w-full lg:w-6/12\">\n        <CreateTodo />\n      </div>\n      <TodoList />\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"names":["value","handleChange","labelId","formatMessage","useFormatMessage","htmlFor","className","id","rows","placeholder","required","onChange","dispatch","useDispatch","useState","setValue","event","target","handleClick","addTodo","uuid","uuidv4","completed","disabled","isOpen","closeAction","confirmAction","title","body","onClick","iconName","alt","type","label","checked","callback","dependencies","didMount","useRef","useEffect","current","todo","currentValue","setCurrentValue","setIsOpen","currentCompleted","setCurrentCompleted","prevTodo","useDidUpdateEffect","isEqual","toast","closeModal","updateTodo","color","deleteTodo","todoList","useSelector","state","ifEmpty","isEmpty","replaceTodos","filter","map"],"sourceRoot":""}